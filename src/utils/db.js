const db = require('../db')

/**
 * Create a Team Entry in the DB, for which the Bot just joined, 
 * @param {*} team 
 * @returns 
 */
const createTeamEntry = async (team) => {
    const dbQuery = "INSERT INTO teams (team_id, team_name, description, status, memebers, is_public, created_at , modified_at  ) values ($1, $2, $3, $4,$5, $6, $7, $8) ON CONFLICT (team_id) DO NOTHING returning *"
    const dbValubes = [team.id, team.name, team.description, team.status, team.members, team.isPublic, team.creationTime, team.lastModifiedTime];
    const dbResults = await db.query(dbQuery, dbValubes)

    return dbResults;
}

/**
 * Function to Save Event data to the Postgres DB
 * @param {*} event_id Autogenerated Event ID for the event
 * @param {*} event Event data given by the event creator in the createEvent Card
 * @param {*} members Memebers of the Team that are invited to the event.
 * @returns 
 */
const createEventEntry = async (event_id, event, members) => {
    try {
        const dbQuery = "INSERT INTO events (event_id, event_name, event_origin, event_owner, attendees, attending, not_attending , event_date, event_start_time, event_end_time, maybe_attending, vaccinated, not_vaccinated, vaccination_status_not_disclosed, did_attend, did_not_attend ) values ($1, $2, $3, $4,$5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16) returning *"
        const dbValubes = [event_id, event.event_name, event.event_origin, event.event_owner, members, [], [], event.event_date, event.event_start_time, event.event_end_time, [], [], [], [], [], []];
        const dbResults = await db.query(dbQuery, dbValubes);
        console.info('Added event to the DB', { event_id: event_id })
        return dbResults;
    } catch (error) {
        console.error(`Unable to add the event to the DB`, { event_id: event_id });
        console.error(error)
    }

}

/**
 * 
 * @param {*} event_id Event ID to fetch the event
 * @returns 
 */
const getEvent = async (event_id) => {
    try {
        const dbQuery = "SELECT * from events where event_id = $1"
        const dbValubes = [event_id]
        const dbResults = await db.query(dbQuery, dbValubes);
        console.info(`Fetched details for the event ${event_id}`)
        return dbResults;
    } catch (error) {
        console.error(`Unable to fetch the event for ${event_id}`);
        console.error(error);
    }

}

/**
 * Function to update to event in the DB
 * @param {*} event New event details submitted by the user
 * @returns 
 */
const updateEventInDB = async (event) => {
    try {
        const dbQuery = "UPDATE events SET event_name = $1, event_date = $2, event_start_time = $3, event_end_time = $4 where event_id = $5 returning *"
        const dbValubes = [event.event_name, event.event_date, event.event_start_time, event.event_end_time, event.event_id]
        const dbResults = await db.query(dbQuery, dbValubes);
        console.info(`Updated event details in the DB`, { event_id: event.event_id })
        return dbResults;
    } catch (error) {
        console.error('Unable to update the event in DB');
        console.error(error);
    }

}


/**
 * 
 * @param {*} card_id 
 * @param {*} receiver_id 
 * @param {*} conversation_id 
 * @param {*} event 
 * @returns 
 */
const createCardEntry = async (card_id, receiver_id, conversation_id, event) => {
    try {
        const dbQuery = "INSERT INTO cards (card_id, team_id, event_id, receiver_user_id, conversation_id, card_action  ) values ($1, $2, $3, $4,$5, $6) returning *"
        const dbValubes = [card_id, event.event_origin, event.event_id, receiver_id, conversation_id, event.action];
        const dbResults = await db.query(dbQuery, dbValubes);
        return dbResults;
    } catch (error) {
        console.error(`Unable to add card entry to the DB`);
        console.error(error);
    }

}

/**
 * 
 * @param {*} event 
 * @param {*} user_id 
 * @returns 
 */
const updateRSVP = async (event, user_id) => {

    const rsvpMap = new Map();
    const vaccinationStatusMap = new Map();

    rsvpMap.set('yes', 'attending = array_append(attending, $1 ), not_attending = array_remove(not_attending,$1), maybe_attending =  array_remove(maybe_attending,$1)')
    rsvpMap.set('no', 'attending = array_remove(attending, $1 ), not_attending = array_append(not_attending,$1), maybe_attending =  array_remove(maybe_attending,$1)')
    rsvpMap.set('maybe', 'attending = array_remove(attending, $1 ), not_attending = array_remove(not_attending,$1), maybe_attending =  array_append(maybe_attending,$1)')

    vaccinationStatusMap.set('yes', 'vaccinated = array_append(vaccinated, $1 ) , not_vaccinated = array_remove(not_vaccinated,$1), vaccination_status_not_disclosed = array_remove(vaccination_status_not_disclosed,$1)');
    vaccinationStatusMap.set('no', 'vaccinated = array_remove(vaccinated, $1 ) , not_vaccinated = array_append(not_vaccinated,$1), vaccination_status_not_disclosed = array_remove(vaccination_status_not_disclosed,$1)')
    vaccinationStatusMap.set('dwts', 'vaccinated = array_remove(vaccinated, $1 ) , not_vaccinated = array_remove(not_vaccinated,$1), vaccination_status_not_disclosed = array_append(vaccination_status_not_disclosed,$1)')

    try {

        const dbQuery = `UPDATE events set ${rsvpMap.get(event.rsvp)},${vaccinationStatusMap.get(event.vaccination)}  where event_id = $2 returning *`
        const dbValubes = [user_id, event.event_id];
        const dbResults = await db.query(dbQuery, dbValubes);
        return dbResults;

    } catch (error) {
        console.error('Unable to update RSVP');
        console.error(error);
    }

}

const updateAttendanceInDB = async (user_id, event) => {
    const attendanceMap = new Map();

    attendanceMap.set('yes', `did_attend = array_append(did_attend, $1 ), did_not_attend = array_remove(did_not_attend, $1) `)
    attendanceMap.set('no', `did_attend = array_remove(did_attend, $1 ), did_not_attend = array_append(did_not_attend, $1) `)


    try {

        const dbQuery = `UPDATE events set ${attendanceMap.get(event.attendance)} where event_id = $2 returning *`
        const dbValubes = [user_id, event.event_id];
        const dbResults = await db.query(dbQuery, dbValubes);
        return dbResults;

    } catch (error) {
        console.error('Unable to update RSVP');
        console.error(error);
    }

}

/**
 * 
 * @param {*} teamID 
 * @returns 
 */
const getTeamMemebers = async (teamID) => {
    try {
        const dbQuery = "select memebers from teams where team_id = $1"
        const dbValubes = [teamID];
        const dbResults = await db.query(dbQuery, dbValubes)
        return dbResults
    } catch (error) {

    }
}

/**
 * 
 * @param {*} tokenData 
 */
const saveToken = async (tokenData) => {
    try {
        console.log("TOKEN data", tokenData);
        const dbQuery = "INSERT INTO tokens (token_type, access_token, expires_in, refresh_token, refresh_token_expires_in, accountId, subscriptionId) values ($1, $2, $3, $4, $5, $6, $7) returning *"
        const dbValues = [tokenData.token_type, tokenData.access_token, tokenData.expires_in, tokenData.refresh_token, tokenData.refresh_token_expires_in, tokenData.accountId, tokenData.owner_id]
        const dbResults = await db.query(dbQuery, dbValues);
    } catch (error) {
        console.error('error saving token');
        console.error(error);
    }


}


/**
 * Get the list of events created by a User from the DB
 * @param {*} event_owner User that created the events
 * @returns Array of events
 */
const getEventsfromDB = async (event_owner) => {

    try {
        const dbQuery = "select * from events where event_owner = $1"
        const dbValues = [event_owner];
        const dbResults = await db.query(dbQuery, dbValues)
        return dbResults
    } catch (error) {
        console.error('Unable to get Events list');
        console.error(error);
    }
}

/**
 * 
 * @param {*} subscriptionId  bot_id to get the token from the DB
 * @returns 
 */
const findTokenFromDB = async (subscriptionId) => {
    try {
        const dbQuery = "SELECT * FROM tokens where subscriptionId = $1"
        const dbValues = [subscriptionId];
        const dbResults = await db.query(dbQuery, dbValues);
        return dbResults
    } catch (error) {
        console.error('unable to find token');
        console.error(error);
    }
}

const findTokenFromAccountId = async (accountId) => {
    try {
        const dbQuery = "SELECT * FROM tokens where accountId = $1"
        const dbValubes = [accountId];
        const dbResults = await db.query(dbQuery, dbValubes);
        return dbResults
    } catch (error) {

    }
}

const getRSVPDetails = async (eventId) => {
    try {
        const dbQuery = "select attendees, attending, not_attending, maybe_attending from events where event_id = $1"
        const dbValubes = [eventId];
        const dbResults = await db.query(dbQuery, dbValubes)

        return dbResults

    } catch (error) {
        console.error('Unable to get event Id');
        console.error(error);
    }
}



module.exports = {
    createTeamEntry: createTeamEntry,
    createEventEntry: createEventEntry,
    getEvent: getEvent,
    getTeamMemebers: getTeamMemebers,
    createCardEntry: createCardEntry,
    updateEventInDB: updateEventInDB,
    updateRSVP: updateRSVP,
    saveToken: saveToken,
    getEventsfromDB: getEventsfromDB,
    getRSVPDetails: getRSVPDetails,
    findTokenFromDB: findTokenFromDB,
    findTokenFromAccountId: findTokenFromAccountId,
    updateAttendanceInDB: updateAttendanceInDB
}


